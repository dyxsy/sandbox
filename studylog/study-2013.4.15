study-2013.4.15
1.Sublime Text 2 输入中文的方法 
			--> 快捷键 Ctrl + Shift + Z --> 输入 --> Enter
2.Extjs4.1
	->The Class System
		-->命名空间和类以驼峰式命名，并且至少包含一个顶级命名空间
			--->例:	MyCompany.data.CoolProxy
					MyCompany.Application

		-->静态常量应该所有大写，
			--->例:	Ext.MessageBox.SING = "holle word"

		-->Ext.extend(类,{参数}) 继承一个类
			--->例:	Ext.extend(Ext.Window,{});

		-->Ext.ns('') 新建一个命名空间
			--->例:	Ext.ns('My.win');
					My.win.Window = Ext.extend(Ext.Window,{});

		-->Ext.define('类名',{参数},onClassCreated) 新建一个类
			--->例:	Ext.define('My.class.MyTest',{
						name: 'xiaoming'
						},
						eat: function(value){
							alert(value);
						}
					);

		-->Ext.create('类名','参数') 实例化一个类
			--->例:	Ext.create('My.class.MyTest','name');

		-->Configuration 一个封装机制,自动生成get 和 set

		-->Statics 定义静态的成员
			--->例:	Ext.defind('MyTest',{
						statics:{
							name: 'xiaoming',
							age: 13
							sing: function(singing) {
								return singing
							}
						}

					});

		小结：
		The Class System 主要介绍了Extjs中的类和命名空间，其中包括类的建立defind,类的继承extend,类的实例化create;命名空间的建立ns;
		Extjs的Configuration自动封装机制;Statics定义静态成员;

***************************************************

	->Layouts and Cont
		-->Containers --- Extjs 中的一个组件可由各个细小的部分组成，组件于组件进行嵌套又能组成新的组件
			--->例:	Ext.create('Ext.panel.Panel', {
    					renderTo: Ext.getBody(),
   						width: 400,
   						height: 300,
    					title: 'Container Panel',
    					items: [
        					{
            					xtype: 'panel',
            					title: 'Child Panel 1',
           						height: 100,
            					width: '75%'
        					},
        					{
            					xtype: 'panel',
					            title: 'Child Panel 2',
					            height: 100,
					            width: '75%'
        					}
    					]
					});

		-->Layouts --- 布局
			--->column
					---->columnWidth:0.5 --- 子面板的宽度为父面板的宽度的50％
			--->doLayout --- 面板自动布局
					---->suspendLayout:true --- 当为true时，禁用面板的自动调整
		小结:
		Layouts and Cont 主要介绍了在Extjs中一个典型组件可以由多个组件嵌套而成，在布局方面有doLayout自动布局，可以通过suspendLayout:true来禁用自动布局等

**************************************************

	->Components
		-->XType --- 例:xtype: ' panel' 当需要时，实例panel对象
		-->Showing --- 例:panel.show();显示面板
		-->Hiding --- 例:panel.hide();隐藏面板
		-->Floating --- 例:floating:true 组件可浮动
		-->Subclassing --- 例: extend:'Ext.Component' 子类化
		-->Template Methods --- 例: 当extend:'Ext.Component'后,onRender: function(){}可以调用其继承的方法和增加自己的方法
		小结:
		Components 主要介绍了一些常用的组件方法

*********************************************

	->The Date Package
		-->model
			--->例:	//建立一个Model
					Ext.define('User',{
						extend:'Ext.data.Model',
						fields:[
							{name:'id',type:'int},
							{name:'name',type:'string'}
						]
					});
					//建立一个Ajax Proxy
					Ext.create('Ext.data.Store',{
						model:'User',
						proxy:{
							type:'ajax',
							url:'users.json',
							reader:'json'
						},
						autoLoad:true
					});
					//建立一个Store
					{
						success: true,
						users:[
							{id:1,name:'Ed'},
							{id:2,name:'Tommy'}
						]
					}

		-->Sorting and Grouping 过滤与分组
			--->例: Ext.create('Ext.data.Store',{
						model:'User',
						sorters:['name','id'],
						//过滤名称不为Ed的用户
						filters:{ 
							property:'name',
							value:'Ed'
						},
						//以年龄分组
						groupField:'age',
						//降序排列
						groupDir:'DESC'
					});

		-->Validations 验证(利用正则表达式)
			--->例:	Ext.define('User', {
    					extend: 'Ext.data.Model',
    					fields: ...,

    					validations: [
        					{type: 'presence', 	name: 'name'}, //确保有值
					        {type: 'length',   	name: 'name', min: 5}, //在多少字符之间
					        {type: 'format',   	name: 'age', matcher: /\d+/}, //正则表达式判断
					        {type: 'inclusion', name: 'gender', list: ['male', 'female']}, //只允许一个字符表示
					        {type: 'exclusion', name: 'name', list: ['admin']} //不允许为这个字段

    					],

   						 proxy: ...
					});

		--> 实例变量与类变量的区别
			---> 类变量或者静态变量 --- 被static关键字修饰的变量
			---> 实例变量 --- 没有static修饰
				----> 类的静态变量在内存中只有一个，当运行时,在加载类的过程中为静态变量分配内存，静态变量位于方法区，被类的所有实例共享。静态变量可以直接通过类名进行访问，其生命周期取决于类的生命周期。而实例变量取决于类的实例。每创建一个实例，java虚拟机就会为实例变量分配一次内存，实例变量位于堆区中，其生命周期取决于实例的生命周期
					