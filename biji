在config/routes.rb加入 resources :events 
	就会自动建立四个命名路由,与四个HTTP动词,对应七个Action
	get    '/events'          => "events#index",   :as => "events"		#复数 
	post   '/events'          => "events#create",  :as => "events"  	#复数
	get    '/events/:id'      => "events#show",    :as => "event"   	#单数
	put    '/events/:id'      => "events#update",  :as => "event"   	#单数
	delete '/events/:id'      => "events#destroy", :as => "event"		  #单数
	get    '/events/new'      => "events#new",     :as => "new_event" 	#单数
	get    '/events/:id/edit' => "events#edit",    :as => "edit_event" 	#单数

	注:这七个是无法修改的,rails默认的

当需要自定义路由时,需要用到:on参数:
  :on参数有三种取值:
	member 表示这个路由是针对特定的一个实体对象来进行操作 url:'/:controller/:id/:action'
	collection 表示这个路由是对实体对象集合来进行操作  url:'/:controller/:action'
	new 表示新建一个实体 url:'/:controller/:action/new'

	当只有一个时:
	resources :events do
		get 'click', :on => member
  end

  多个时:
  resources :events do
    member do
      get 'click'
      get 'select'
    end
  end

:constraints可以设定一些参数限制:
  例:id必须为整数
  match "/events/show/:id" => "events#show", :constraints => {:id => /\d/}
  例:限定请求的IP地址
  constraints(:ip => /(^127.0.0.1$)|(^192.168.[0-9]{1,3}.[0-9]{1,3}$)/) do
    match "/events/show/:id" => "events#show"
  end

:verb HTTP动词限定
match "account/overview" => "account#overview", :via => "get"

设置首页:
root :to => 'welcome#show'

复数资源(resources :events)与单数资源(resource :map)的区别:单数资源没有index action

添加命名空间:
namespace :admin do
  resources :projects
    collection do
      get 'search'
    end
  end
end

url:'/admin/projects/search(.:format)'

查看所有URL Helper、URL地址和对应的Controller Action:
rake routes


模型验证 :只允许保存有效的字段到数据库中,无法绕过， 便于测试和维护
客户端验证 :通过js来验证，但容易被绕过验证
数据库验证 :添加约束，但不适用与大量验证
控制器验证 :不利于维护和测试

以下几种方法会触发验证
create
create!
save
save!
update
update_attributes
update_attributes!

以下几种方法，跳过验证，应谨慎使用
decrement!
decrement_counter
increment!
increment_counter
toggle!
touch
update_all
update_attribute
update_column
update_counters

注：保存也可以跳过验证，通过参数 :validate => false

:confirmation => true 二次验证
例:
class Person < ActiveRecord::Base
  validates :email, :confirmation => true
end
<%= text_field :person, :email %>
<%= text_field :person, :email_confirmation %>

:exclusion 必须含有
class Account < ActiveRecord::Base
  validates :subdomain, :exclusion => { :in => %w(www us ca jp),
    :message => "Subdomain %{value} is reserved." }
end

:format 必须符合格式
class Product < ActiveRecord::Base
  validates :legacy_code, :format => { :with => /\A[a-zA-Z]+\z/,
    :message => "Only letters allowed" }
end

:inclusion 必须为
class Coffee < ActiveRecord::Base
  validates :size, :inclusion => { :in => %w(small medium large),
    :message => "%{value} is not a valid size" }
end

:length 设定宽度范围
class Person < ActiveRecord::Base
  validates :name, :length => { :minimum => 2 }
  validates :bio, :length => { :maximum => 500 }
  validates :password, :length => { :in => 6..20 }
  validates :registration_number, :length => { :is => 6 }
end

:presence => true 非空



where  添加条件
select 选择查询字段
group  分组查询
order  排序查询
reorder 设定新的排序
reverse_order 反向排序
limit  分页中,指每页显示条数
offset 指从第几条开始查询
joins  多表查询
includes
lock
readonly 只读查询
from
having 分组查询添加条件

占位符: Users.where("name = ? AND number = ?", 'xiao', 10);
键值对应: Users.where("name = :name AND number = :number", :name => 'xiao', :number => 10);

利用区间,以时间范围作为条件:where(:created_at => (params[:start_date].to_date)..(params[:end_date].to_date))

where(:number => [1,2,3]) 相当于 WHERE (users.number IN (1,3,5))

排序: Users.order("created_at DESC")
     Users.order("created_at ASC")

查询指定字段: Users.select("number")

过滤重复: Users.select("name").uniq

以编号number分组 ,条件为 id < 10 :
Users.select("name").group("number").having("id < ?", 10)

count 条数
average 平均值
minimum 最小值
maximum 最大值
sum 总和
explain


期货知识

多头:看涨买入
空头:看跌卖出


  def exchange_name_label
    str = self.exchange_name
    m = str.match(/\p{Han}*\d*\p{Han}*/).to_s
    m = str.match(/\p{Han}*/).to_s if m.present?
    m = str.match(/[A-Za-z]*/).to_s if m.present?
    puts m
  end