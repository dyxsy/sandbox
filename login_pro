%%%-------------------------------------------------------------------
%%% @author Jack Tang <jack@taodinet.com>
%%% @copyright (C) 2014, Jack Tang
%%% @doc
%%%
%%% @end
%%% Created : 21 Jan 2014 by Jack Tang <jack@taodinet.com>
%%%-------------------------------------------------------------------
-module(login_progress).

-behaviour(gen_server).

%% API
-export([start/1,
         start_link/2]).

-export([step/2,
         sub_step/3]).

%% gen_server callbacks
-export([init/1,
         handle_call/3,
         handle_cast/2,
         handle_info/2,
         terminate/2,
         code_change/3]).

-define(SERVER, ?MODULE). 

-record(state, { admin_id,
                 steps,
                 sub_steps,
                 weights}).

%%%===================================================================
%%% API
%%%===================================================================
step(AdminId, Step) ->
    PName = ninja_process_name:login_progress(AdminId),
    gen_server:cast(PName, {step, Step}).

sub_step(AdminId, Step, {start, SubStep}) ->
    PName = ninja_process_name:login_progress(AdminId),
    gen_server:cast(PName, {start_sub_step, Step, SubStep});

sub_step(AdminId, Step, {complete, SubStep}) ->
    PName = ninja_process_name:login_progress(AdminId),
    gen_server:cast(PName, {complete_sub_step, Step, SubStep}).
             
%%%===================================================================
%%% API
%%%===================================================================
start(AdminId) ->
    case supervisor:start_child(login_progress_sup, [AdminId]) of
        {ok, Pid}                        -> {ok, Pid};
        {ok, Pid, _Info}                 -> {ok, Pid};
        {error, {already_started, Pid} } -> {ok, Pid};
        {error, Reason}                  -> {error, Reason}
    end.

%%--------------------------------------------------------------------
%% @doc
%% Starts the server
%%
%% @spec start_link() -> {ok, Pid} | ignore | {error, Error}
%% @end
%%--------------------------------------------------------------------
start_link(_Login, AdminId) ->
    PName = ninja_process_name:login_progress(AdminId),
    gen_server:start_link({local, PName}, ?MODULE, [AdminId], []).

%%%===================================================================
%%% gen_server callbacks
%%%===================================================================

%%--------------------------------------------------------------------
%% @private
%% @doc
%% Initiates the server
%%
%% @spec init(Args) -> {ok, State} |
%%                     {ok, State, Timeout} |
%%                     ignore |
%%                     {stop, Reason}
%% @end
%%--------------------------------------------------------------------
init([AdminId]) ->
    Weights = [{sync_admin_investors,         5},
               {sync_groups,                  10},
               {sync_adminships,              15},
               {sync_monitor_groups,          10},
               {sync_monitor_usrs,            10},
               {sync_monitor_usrs_positions,  10},
               {sync_monitor_usrs_capitals,   10},
               {sync_monitor_usrs_orders,     10},
               {sync_monitor_usrs_trades,     20} ],
    Steps = lists:foldl(fun({Step, _W}, Acc0) ->
                                EndStep = list_to_atom(atom_to_list(Step) ++ "_end"),
                                sets:add_element(EndStep, Acc0)
                        end, sets:new(), Weights),
    {ok, #state{ admin_id    = AdminId,
                 steps       = Steps,
                 sub_steps   = orddict:new(),
                 weights     = Weights }}.

%%--------------------------------------------------------------------
%% @private
%% @doc
%% Handling call messages
%%
%% @spec handle_call(Request, From, State) ->
%%                                   {reply, Reply, State} |
%%                                   {reply, Reply, State, Timeout} |
%%                                   {noreply, State} |
%%                                   {noreply, State, Timeout} |
%%                                   {stop, Reason, Reply, State} |
%%                                   {stop, Reason, State}
%% @end
%%--------------------------------------------------------------------
handle_call(_Request, _From, State) ->
    lager:warning("Can't handle request: ~p", [_Request]),
    {reply, {error, invalid_request}, State}.

%%--------------------------------------------------------------------
%% @private
%% @doc
%% Handling cast messages
%%
%% @spec handle_cast(Msg, State) -> {noreply, State} |
%%                                  {noreply, State, Timeout} |
%%                                  {stop, Reason, State}
%% @end
%%--------------------------------------------------------------------
handle_cast({step, Step}, #state{}=State) ->
    #state{admin_id = AdminId,
           weights  = Weights,
           steps    = Steps } = State,

    Progress = case lists:keysearch(Step, 1, Weights) of
                   {value, {_, W}} -> [Step, W];
                   false           -> Step
               end,
    Data = {progress, Progress},
    ws_msg_router:pub_to_admin(AdminId, Data),

    NSteps = sets:del_element(Step, Steps),

    lager:info("Current step is ~p =====================> ~p ==> ~p", [Step, sets:size(NSteps),NSteps]),

    case sets:size(NSteps) of
        0 ->
            ws_msg_router:pub_to_admin(AdminId, {progress, <<"completed">>}),
            {stop, normal, State#state{steps = NSteps}};
        _ ->
            {noreply, State#state{steps = NSteps}}
    end;

handle_cast({start_sub_step, Step, SubStep}, #state{sub_steps = SubSteps}=State) ->
    NSubSteps =
        case orddict:find(Step, SubSteps) of
            error ->
                orddict:store(Step, sets:from_list([SubStep]), SubSteps);
            {ok, Val} ->
                orddict:store(Step, sets:add_element(SubStep, Val), SubSteps)
        end,
    {noreply, State#state{sub_steps = NSubSteps}};

handle_cast({complete_sub_step, Step, SubStep}, #state{sub_steps = SubSteps} = State) ->
    case orddict:find(Step, SubSteps) of
        error      -> {noreply, State};
        {ok, Val}  ->
            Val2 = sets:del_element(SubStep, Val),
            NSubSteps =
                case sets:size(Val2) of
                    0 ->
                        % completed all sub steps
                        gen_server:cast(self(), {step, list_to_atom(atom_to_list(Step) ++ "_end")}),
                        orddict:erase(Step, SubSteps);
                    _ ->
                        orddict:store(Step, Val2, SubSteps)
                end,
            {noreply, State#state{sub_steps = NSubSteps}}
    end;

handle_cast(_Msg, State) ->
    lager:warning("Can't handle msg: ~p", [_Msg]),
    {noreply, State}.

%%--------------------------------------------------------------------
%% @private
%% @doc
%% Handling all non call/cast messages
%%
%% @spec handle_info(Info, State) -> {noreply, State} |
%%                                   {noreply, State, Timeout} |
%%                                   {stop, Reason, State}
%% @end
%%--------------------------------------------------------------------
handle_info(_Info, State) ->
    lager:warning("Can't handle info: ~p", [_Info]),
    {noreply, State}.

%%--------------------------------------------------------------------
%% @private
%% @doc
%% This function is called by a gen_server when it is about to
%% terminate. It should be the opposite of Module:init/1 and do any
%% necessary cleaning up. When it returns, the gen_server terminates
%% with Reason. The return value is ignored.
%%
%% @spec terminate(Reason, State) -> void()
%% @end
%%--------------------------------------------------------------------
terminate(_Reason, _State) ->
    ok.

%%--------------------------------------------------------------------
%% @private
%% @doc
%% Convert process state when code is changed
%%
%% @spec code_change(OldVsn, State, Extra) -> {ok, NewState}
%% @end
%%--------------------------------------------------------------------
code_change(_OldVsn, State, _Extra) ->
    {ok, State}.

%%%===================================================================
%%% Internal functions
%%%===================================================================
